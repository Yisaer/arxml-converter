package converter

import (
	"encoding/hex"
	"fmt"
	"testing"

	"github.com/stretchr/testify/require"
	"github.com/yisaer/idl-parser/converter"

	"github.com/yisaer/arxml-converter/util"
)

func TestGetDataType(t *testing.T) {
	c, err := NewArxmlCPConverter("../../test/s1_cp_test.xml", converter.IDlConverterConfig{IsLittleEndian: false, LengthFieldLength: 4, PaddingLength: 1})
	require.NoError(t, err)
	key, tr, err := c.GetDataTypeByID(33282, 2181169157)
	require.NoError(t, err)
	require.Equal(t, "string", tr.TypeName())
	require.Equal(t, "adt_WiFiApName", key)
	testData := []byte{
		0x00, 0x00, 0x00, 0x08, // 长度字段 (8字节)
		0xEF, 0xBB, 0xBF, // UTF-8 BOM
		0x54, 0x65, 0x73, 0x74, // "Test"
		0x00, // UTF-8 终止符
	}
	key, v, err := c.Convert(33282, 2181169157, testData)
	require.NoError(t, err)
	require.Equal(t, "Test", v)
}

func TestGetDataType2(t *testing.T) {
	t.Skip()
	svcID, headerID, err := util.MergeHexUint16ToUint32("0xab02", "0x8015")
	require.NoError(t, err)
	c, err := NewArxmlCPConverter("../../tmp/example2.xml", converter.IDlConverterConfig{IsLittleEndian: false, LengthFieldLength: 4, PaddingLength: 4})
	require.NoError(t, err)
	key, tr, err := c.GetDataTypeByID(svcID, headerID)
	require.NoError(t, err)
	fmt.Println(key)
	fmt.Println(tr.TypeName())
	data, err := hex.DecodeString("000000000000000202000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000")
	require.NoError(t, err)
	k, v, err := c.Convert(svcID, headerID, data)
	require.NoError(t, err)
	fmt.Println(k)
	fmt.Println(v)
}

func TestGetDataType3(t *testing.T) {
	t.Skip()
	svcID, headerID, err := util.MergeHexUint16ToUint32("0xab04", "0x8009")
	require.NoError(t, err)
	fmt.Println(svcID)
	fmt.Println(headerID)
	c, err := NewArxmlCPConverter("../../tmp/example2.xml", converter.IDlConverterConfig{IsLittleEndian: false, LengthFieldLength: 4, PaddingLength: 1})
	require.NoError(t, err)
	key, tr, err := c.GetDataTypeByID(svcID, headerID)
	require.NoError(t, err)
	fmt.Println(key)
	fmt.Println(tr.TypeName())
	data := []byte{0x00, 0x00, 0x00, 0x00}
	k, v, err := c.Convert(svcID, headerID, data)
	require.NoError(t, err)
	fmt.Println(k)
	fmt.Println(v)
}

func TestGetDataType4(t *testing.T) {
	t.Skip()
	svcID, headerID, err := util.MergeHexUint16ToUint32("0xab04", "0x8003")
	require.NoError(t, err)
	fmt.Println(svcID)
	fmt.Println(headerID)
	c, err := NewArxmlCPConverter("../../tmp/example2.xml", converter.IDlConverterConfig{IsLittleEndian: false, LengthFieldLength: 4, PaddingLength: 1})
	require.NoError(t, err)
	key, tr, err := c.GetDataTypeByID(svcID, headerID)
	require.NoError(t, err)
	fmt.Println(key)
	fmt.Println(tr.TypeName())
	k, v, err := c.Convert(svcID, headerID, []byte{0x0, 0x0, 0x3, 0x48, 0x0, 0x46, 0x3, 0x1, 0xc4, 0xf8, 0xca, 0x92, 0xc0, 0x77, 0x10, 0x98, 0xc4, 0xd0, 0xdd, 0xc3, 0xc1, 0xb2, 0x44, 0x55, 0xc5, 0xb, 0x6a, 0xa0, 0xc3, 0xf9, 0x41, 0xde, 0xc4, 0xee, 0xe8, 0x72, 0xc4, 0x1, 0x3c, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x47, 0x2, 0x1, 0xc4, 0xcd, 0xc0, 0xe2, 0xc1, 0xeb, 0xcd, 0x8a, 0xc4, 0xb2, 0x91, 0xd3, 0xc2, 0xb7, 0x21, 0x8c, 0xc4, 0xea, 0x23, 0x26, 0xc4, 0x3, 0x55, 0xcc, 0xc4, 0xce, 0xf4, 0x18, 0xc4, 0x12, 0xdb, 0x91, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x48, 0x3, 0x1, 0xc4, 0xa6, 0x2d, 0xe5, 0x44, 0x1f, 0x34, 0xf6, 0xc4, 0xcd, 0xea, 0x7c, 0x44, 0x28, 0x1f, 0xc1, 0xc4, 0xbf, 0x2c, 0xc3, 0x44, 0x8d, 0x9e, 0x71, 0xc4, 0xe6, 0xe9, 0xa4, 0x44, 0x92, 0x14, 0x90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x49, 0x3, 0x1, 0xc4, 0xa7, 0xa3, 0x4a, 0xc2, 0x28, 0xab, 0x4e, 0xc4, 0x82, 0x36, 0x92, 0xc2, 0xc8, 0x29, 0xba, 0xc4, 0xcc, 0x10, 0xc6, 0xc4, 0x15, 0x72, 0xfa, 0xc4, 0xa6, 0xa4, 0xd, 0xc4, 0x23, 0xed, 0x7d, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4a, 0x3, 0x1, 0xc4, 0x7c, 0xa3, 0x9b, 0x44, 0x19, 0x34, 0x1e, 0xc4, 0xa4, 0x5c, 0xff, 0x44, 0x20, 0x1d, 0x52, 0xc4, 0x96, 0x4, 0x61, 0x44, 0x8b, 0x20, 0xdf, 0xc4, 0xbc, 0xf, 0x92, 0x44, 0x8e, 0x95, 0x79, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4b, 0x3, 0x3, 0xc4, 0x25, 0x71, 0x70, 0x44, 0x15, 0xed, 0x4e, 0xc4, 0x77, 0x49, 0x79, 0x44, 0x1c, 0x68, 0x6b, 0xc4, 0x53, 0x59, 0x11, 0x44, 0x89, 0xc3, 0x2f, 0xc4, 0x92, 0x98, 0xa4, 0x44, 0x8d, 0x0, 0xb4, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4c, 0x3, 0x1, 0xc4, 0x7b, 0xd9, 0x7f, 0xc2, 0x76, 0x27, 0xaa, 0xc4, 0x28, 0xd9, 0xb1, 0xc2, 0xbb, 0xe9, 0x4, 0xc4, 0x9f, 0xf3, 0x1, 0xc4, 0xe, 0xeb, 0xac, 0xc4, 0x6c, 0xe6, 0x35, 0xc4, 0x17, 0x6, 0x52, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4d, 0x3, 0x3, 0xc3, 0xa1, 0x50, 0xe3, 0x44, 0xf, 0xe2, 0xd, 0xc4, 0x1d, 0xf3, 0x38, 0x44, 0x16, 0x7c, 0xbc, 0xc3, 0xfe, 0x9d, 0xb1, 0x44, 0x86, 0x9b, 0x1d, 0xc4, 0x4c, 0x99, 0x9f, 0x44, 0x89, 0xe8, 0x75, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4e, 0x2, 0x3, 0xc4, 0x20, 0xb3, 0x33, 0xc2, 0xc7, 0xb0, 0x8a, 0xc3, 0xd1, 0xe8, 0xb5, 0xc3, 0x12, 0x89, 0x74, 0xc4, 0x5e, 0x6f, 0xb9, 0xc4, 0x12, 0x87, 0xa5, 0xc4, 0x26, 0xb1, 0x3d, 0xc4, 0x1e, 0x32, 0xbf, 0x9, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x4f, 0x3, 0x3, 0xc3, 0x8f, 0xf3, 0x27, 0xc2, 0xe4, 0x7f, 0x70, 0xc2, 0x88, 0xc2, 0x80, 0xc3, 0x29, 0x99, 0xf1, 0xc4, 0x1, 0xda, 0x69, 0xc4, 0x18, 0x3, 0x97, 0xc3, 0x95, 0xf3, 0x1c, 0xc4, 0x25, 0xd8, 0xf0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x3, 0x3, 0x41, 0xea, 0x8, 0xcf, 0x44, 0xa, 0x6c, 0xfa, 0xc3, 0x96, 0x88, 0x82, 0x44, 0x10, 0x3b, 0xe9, 0xc3, 0x32, 0x3e, 0x60, 0x44, 0x82, 0xd7, 0x8d, 0xc3, 0xfe, 0x47, 0xe2, 0x44, 0x85, 0xbf, 0xe, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51, 0x3, 0x3, 0x42, 0x8, 0x6c, 0xf0, 0xc3, 0x2, 0xf4, 0x93, 0x43, 0x9f, 0xef, 0xb5, 0xc3, 0x35, 0xd3, 0x24, 0xc3, 0x8a, 0x6e, 0x7d, 0xc4, 0x31, 0x1f, 0x16, 0x41, 0xe, 0xa3, 0xb5, 0xc4, 0x3d, 0xd8, 0x1b, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x52, 0x3, 0x3, 0x43, 0xa4, 0xbd, 0xb6, 0x44, 0x7, 0x9d, 0xcd, 0x42, 0x3a, 0x8b, 0x43, 0x44, 0xc, 0x3d, 0x60, 0x43, 0x10, 0x0, 0x18, 0x44, 0x82, 0x86, 0x55, 0xc3, 0xa, 0xd9, 0x3d, 0x44, 0x84, 0xd6, 0x15, 0x4, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x53, 0x3, 0x3, 0x43, 0xc5, 0xbb, 0x82, 0xc3, 0x15, 0xc8, 0x22, 0x44, 0x1a, 0x52, 0x38, 0xc3, 0x40, 0xb1, 0x7, 0x43, 0x22, 0x43, 0x55, 0xc4, 0x20, 0xb2, 0xce, 0x43, 0xc0, 0xb, 0x87, 0xc4, 0x2b, 0x6e, 0x3f, 0x6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x54, 0x3, 0x3, 0x44, 0x27, 0x66, 0xaa, 0x44, 0x2, 0x67, 0xac, 0x43, 0xb6, 0x55, 0x27, 0x44, 0x6, 0xb2, 0x7f, 0x43, 0xf4, 0x1c, 0x5c, 0x44, 0x80, 0x1b, 0xd, 0x43, 0x37, 0x48, 0x5c, 0x44, 0x82, 0x40, 0x76, 0x5, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0})
	require.NoError(t, err)
	fmt.Println(k, v)
}

func TestGetDataType5(t *testing.T) {
	t.Skip()
	svcID, headerID, err := util.MergeHexUint16ToUint32("0xab0a", "0x8003")
	require.NoError(t, err)
	fmt.Println(svcID)
	fmt.Println(headerID)
	c, err := NewArxmlCPConverter("../../tmp/example2.xml", converter.IDlConverterConfig{IsLittleEndian: false, LengthFieldLength: 4, PaddingLength: 1})
	require.NoError(t, err)
	key, tr, err := c.GetDataTypeByID(svcID, headerID)
	require.NoError(t, err)
	fmt.Println(key)
	fmt.Println(tr.TypeName())
	k, v, err := c.Convert(svcID, headerID, []byte{0x1, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0})
	require.NoError(t, err)
	fmt.Println(k, v)
}
